function formatText(text){return text.replace(/%n/g,"<br/>")}var module=angular.module("jstext.game",["jstext.prediction"]);module.constant("WITH_SEPARATOR"," with "),module.constant("getOrDefault",function(value,defaultValue){return"undefined"!=typeof value?value:defaultValue}),module.factory("Actions",["getOrDefault",function(getOrDefault){return{enable:function(gameState,action,entity){entity.enabled=getOrDefault(action.value,!entity.enabled)},remove:function(gameState,action,entity){entity.remove()},state:function(gameState,action,entity){entity.state=action.value},take:function(gameState,action,entity){entity.remove(),gameState.inventory.add(entity)},visible:function(gameState,action,entity){entity.visible=getOrDefault(action.value,!entity.visible)},win:function(gameState,action,entity){gameState.win()}}}]),module.constant("Conditions",{state:function(gameState,condition,entity){return entity.state===condition.value},item:function(gameState,condition,entity){return entity.name in gameState.inventory.objects}}),module.factory("EntityCommand",["Actions","Conditions","WITH_SEPARATOR",function(actions,conditions,WITH_SEPARATOR){return function(gameState,cmd,cmdKey,param){var entityName,withItemName,withIndex=param.indexOf(WITH_SEPARATOR);withIndex>=0?(entityName=param.substr(withIndex+WITH_SEPARATOR.length),withItemName=param.substr(0,withIndex)):(entityName=param,withItemName=null);var current=gameState.location,entity=0==entityName.length?current:current.objects[entityName];if(!withItemName||withItemName in gameState.inventory.objects)if(entity&&entity.visible)if(entity.enabled){var action=entity[withItemName?cmdKey+"_with":cmdKey];if(action)if(withItemName&&withItemName!==action.item)gameState.print("Can not use "+withItemName+" with this.");else{var conditionMet=!0;action["if"]&&action["if"].forEach(function(condition){var conditionFunc=conditions[condition.type];if(conditionFunc){var targets=condition.targets||[entity.name];conditionMet=targets.every(function(targetId){var entity=gameState.allEntities[targetId],result=conditionFunc(gameState,condition,entity);return result||gameState.print(condition["else"]),result})}}),conditionMet&&(action.text&&gameState.print(action.text),action["do"]&&action["do"].forEach(function(doAction){var actionFunc=actions[doAction.type];if(actionFunc){var targets=doAction.targets||[entity.name];targets.forEach(function(targetId){var entity=gameState.allEntities[targetId];actionFunc(gameState,doAction,entity)})}}))}else gameState.print("Not possible.")}else gameState.print("Not possible right now.");else gameState.print("Can not "+cmd+": "+entityName+" not found");else gameState.print(withItemName+" not in inventory.")}}]),module.factory("GoCommand",[function(){return function(gameState,cmd,cmdKey,param){var locationName=param;if(locationName){var location=gameState.allEntities[locationName];location&&location.visible?location===gameState.location?gameState.print("You are already at "+locationName):!location.enabled||gameState.location.adjacent.indexOf(location.name)<0?gameState.print("Can not go to "+location.name):(gameState.location=location,gameState.print("You are now at: "+location.name)):gameState.print(locationName+" not found. Can not go.")}else gameState.print("Where to go to?")}}]),module.factory("HelpCommand",[function(){function helpCmd(gameState,cmd,cmdKey,param){gameState.print("Available commands: "+helpCmd.interactions.map(function(interaction){return interaction.cmds[0]}).join(", ")+".")}return helpCmd.interactions=[],helpCmd}]),module.service("Interaction",[function(){return function(cmds,cmdKey,command){this.cmds=cmds,this["do"]=function(gameState,cmd,param){command(gameState,cmd,cmdKey,param)}}}]),module.factory("Interactions",["Interaction","EntityCommand","GoCommand","HelpCommand",function(Interaction,EntityCommand,GoCommand,HelpCommand){var interactions=[new Interaction(["use"],"use",EntityCommand),new Interaction(["take","pick up"],"take",EntityCommand),new Interaction(["look at","look","inspect"],"look",EntityCommand),new Interaction(["go to","walk to","go","walk","cd"],"go",GoCommand),new Interaction(["help","?"],"",HelpCommand)];return HelpCommand.interactions=interactions,interactions.forCmd=function(cmd){var usedCmd="",matches=$.grep(interactions,function(interaction){return interaction.cmds.some(function(iCmd){return cmd.substr(0,iCmd.length)!==iCmd||cmd.length!=iCmd.length&&" "!=cmd[iCmd.length]?!1:(usedCmd=iCmd,!0)})}),interaction=matches.length>0?matches[0]:null,param=cmd.substr(usedCmd.length).trim();return{"do":function(gameState){return interaction&&interaction["do"](gameState,usedCmd,param),this},"else":function(callback){interaction||callback()}}},interactions}]),module.service("Entity",["getOrDefault",function(getOrDefault){return function(name,model,parent){this.name=name,this.parent=parent,this.text=model.text,this.imageUrl=model.imageUrl,this.visible=getOrDefault(model.visible,!0),this.enabled=getOrDefault(model.enabled,!0),this.state=model.state||"",this.use=model.use||null,this.use_with=model.use_with||null,this.take=model.take||null,this.look=model.look||null,this.objects=model.objects||{},this.adjacent=model.adjacent||[],this.remove=function(){this.parent&&this.name in this.parent.objects&&delete this.parent.objects[this.name]},this.add=function(entity){this.objects[entity.name]=entity,entity.parent=this}}}]),module.factory("buildEntityMap",["Entity",function(Entity){return function(model){var allEntities={};for(var key in model.locations){var loc=model.locations[key],locEntity=new Entity(key,loc,null);allEntities[key]=locEntity;for(var objKey in loc.objects)allEntities[objKey]=new Entity(objKey,loc.objects[objKey],locEntity)}return Object.keys(allEntities).forEach(function(name){var entity=allEntities[name],objectModel=entity.objects;entity.objects={},Object.keys(objectModel).forEach(function(objName){entity.objects[objName]=allEntities[objName]})}),allEntities}}]),module.service("GameState",["buildEntityMap","Entity","Interactions","PredictionService",function(buildEntityMap,Entity,interactions,predictionService){return function(game,printer,winCallback){var gameState=this;this.game=game,this.print=printer,this.predictionService=predictionService,this.allEntities=buildEntityMap(game.model),this.location=this.allEntities[game.startLocationName],this.inventory=new Entity("inventory",{},null),this.print(game.startText),this.win=function(){this.print("YOU WIN THE GAME"),winCallback()},this.commandList=[],interactions.forEach(function(interaction){gameState.commandList.push.apply(gameState.commandList,interaction.cmds)}),this.enter=function(text){var trimmedText=text.trim();interactions.forCmd(trimmedText)["do"](this)["else"](function(){var prediction=predictionService.findClosestElement(trimmedText,gameState.commandList);gameState.print(prediction?"Did you mean "+prediction+"?":"I don't understand '"+trimmedText+"'.")})}}}]),module.service("Game",["GameState",function(GameState){return function(model){this.startLocationName=model.start,this.startText=model.start_text,this.model=model,this.start=function(printer,winCallback){return new GameState(this,printer,winCallback)}}}]);var jstext=angular.module("jstext",["ngSanitize","luegg.directives","jstext.prediction","jstext.game"]);jstext.controller("GameController",["$scope","$http","Game",function($scope,$http,Game){$scope.restart=function(){$scope.log=[],$scope.gameState=$scope.game.start($scope.print,$scope.onWin),$scope.inventory=$scope.gameState.inventory.objects},$scope.onWin=function(){},$http.get("game/test.json").then(function(result){$scope.game=new Game(result.data),$scope.restart(),$scope.updateLocation()}),$scope.updateLocation=function(){$scope.location=$scope.gameState?{text:formatText($scope.gameState.location.text),image:$scope.gameState.location.imageUrl||"http://www.theodora.com/maps/new9/time_zones_4.jpg"}:{}},$scope.updateLocation();var addLog=function(text,type){$scope.log.push({index:$scope.log.length,text:text,type:type})};$scope.print=function(text){addLog(formatText(text),"output")},$scope.input="",$scope.command=function(){addLog($scope.input,"input"),"restart"===$scope.input?$scope.restart():($scope.gameState.enter($scope.input),$scope.updateLocation()),$scope.input=""},$scope.useItem=function(name){$scope.input="use "+name+" with ",setTimeout(function(){$("#inputfield").focus()},1)}}]);var prediction=angular.module("jstext.prediction",[]);prediction.constant("HAMMING_THRESHOLD",4),prediction.factory("PredictionService",["HAMMING_THRESHOLD",function(HAMMING_THRESHOLD){var service={};return service.findClosestElement=function(element,haystack){this.findHammingDistance=function(a,b){for(var firstIsShorter=a.length<=b.length,shorter=(firstIsShorter?a:b).toLowerCase(),longer=(firstIsShorter?b:a).toLowerCase(),hammingDistance=0,i=0;i<longer.length;i++)shorter.length===i&&(shorter+=" "),shorter.charAt(i)!==longer.charAt(i)&&(hammingDistance+=1);return hammingDistance};var foundEle,minDistance=Number.MAX_VALUE,closestElement=null;for(var i in haystack){var test=haystack[i];if(!(test.length<2)){var currentEle=element;currentEle.length>test.length&&(currentEle=currentEle.substr(0,test.length));var currentDistance=this.findHammingDistance(currentEle,test);minDistance>currentDistance&&(minDistance=currentDistance,closestElement=test,foundEle=currentEle)}}var threshold=Math.min(HAMMING_THRESHOLD,foundEle.length-1);return threshold>=minDistance?closestElement:null},service}]);
//# sourceMappingURL=data:application/json;base64,